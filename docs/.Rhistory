library(readr)
library(dplyr)
library(tidytext)
library(tm)
library(ggplot2)
library(ggridges)
rm(list=ls())
col <- RColorBrewer::brewer.pal(5, "Dark2")
options(stringsAsFactors = FALSE)
knitr::opts_chunk$set(message=FALSE, warning=FALSE)
load(file = "../output/prep2.Rda")
df.reg1 <- df %>%
select(city, price, overall_satisfaction, pic_count,
room_type, bed_type, reviews, accommodates) %>%
mutate(city = as.factor(city),
room_type = as.factor(room_type),
bed_type = as.factor(bed_type),
log_price = log(price)) %>%
filter(price != 0)
df %>%
select(price, overall_satisfaction, pic_count,
reviews, accommodates) %>%
cor()
lm.base <- lm(log_price ~ overall_satisfaction + reviews
+ room_type + bed_type + accommodates
+ city + pic_count
, data = df.reg1,
na.action=na.pass)
summary(lm.base)
df.reg1$predicted <- predict(lm.base)
df.reg1$residuals <- residuals(lm.base)
par(mfrow=c(2,2))
plot(lm.base)
par(mfrow=c(2,2))
plot(lm.base)
par(mfrow=c(2,2))
plot(lm.base)
df.reg1$predicted <- predict(lm.base)
df.reg1$residuals <- residuals(lm.base)
df.reg1 %>%
ggplot(aes(predicted, residuals)) +
geom_point(aes(color=residuals)) +
scale_color_gradient2(low = "red", mid = "grey50",
high = "red")
lm.base <- lm(log_price ~ overall_satisfaction + reviews
+ room_type + accommodates
+ city + pic_count
, data = df.reg1,
na.action=na.pass)
summary(lm.base)
par(mfrow=c(2,2))
plot(lm.base)
df.reg <- df %>%
select(city, price, overall_satisfaction, pic_count,
room_type, bed_type, reviews, accommodates) %>%
mutate(city = as.factor(city),
room_type = as.factor(room_type),
bed_type = as.factor(bed_type),
log_price = log(price)) %>%
filter(price != 0)
library(readr)
library(dplyr)
library(tidytext)
library(tm)
library(ggplot2)
library(ggridges)
rm(list=ls())
col <- RColorBrewer::brewer.pal(5, "Dark2")
options(stringsAsFactors = FALSE)
knitr::opts_chunk$set(message=FALSE, warning=FALSE)
load(file = "../output/prep2.Rda")
df.reg <- df %>%
select(city, price, overall_satisfaction, pic_count,
room_type, bed_type, reviews, accommodates) %>%
mutate(city = as.factor(city),
room_type = as.factor(room_type),
bed_type = as.factor(bed_type),
log_price = log(price)) %>%
filter(price != 0)
#create test and training sets
bound <- floor((nrow(df.reg)/4)*3)         #define % of training and test set
df.reg <- df.reg[sample(nrow(df.reg)), ]           #sample rows
df.train <- df.reg[1:bound, ]              #get training set
df.test <- df.reg[(bound+1):nrow(df.reg), ]    #get test set
# Training Data
summary(df.train$price)
# Test Data
summary(df.test$price)
p1 <- ggplot(df.train, aes(log(price))) +
geom_density(fill = col[3], color = "white") +
labs(title = "Train Data")
p2 <- ggplot(df.test, aes(log(price))) +
geom_density(fill = col[3], color = "white") +
labs(y="", title = "Test Data")
grid.arrange(p1, p2, ncol=2)
??grid.arrange
par(mfrow(c=(2,1)))
par(mfrow(c=(2,1)))
par(mfrow=c(2,2))
p1
p2
p1 <- ggplot(df.train, aes(log(price))) +
geom_density(fill = col[3], color = "white") +
labs(title = "Train Data")
p2 <- ggplot(df.test, aes(log(price))) +
geom_density(fill = col[3], color = "white") +
labs(y="", title = "Test Data")
par(mfrow=c(2,2))
p1
p2
gridExtra::grid.arrange(p1, p2, nrow = 1)
# (1) estimate the training model
lm.train <- lm(log(price)~., data = df.train)
# (2) make prediction
pred <- predict(lm.train, newdata = df.test)
# (3) evaluate
rmse <- sqrt(sum((exp(pred) - df.test$price)^2)/length(df.test$price))
c(RMSE = rmse, R2=summary(lm.train)$r.squared)
par(mfrow=c(1,1))
plot(df.test$price, exp(pred))
# Training Data
summary(df.train)
# Test Data
summary(df.test)
